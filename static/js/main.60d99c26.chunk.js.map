{"version":3,"sources":["helpers.ts","constants.ts","reducer/users.ts","reducer/filters.ts","reducer/index.ts","store/index.ts","middlewares/api.ts","components/common/Loader.tsx","AC/index.ts","selectors/index.ts","components/css.ts","components/User.tsx","components/Filters/Input.tsx","components/Filters/Pagination.tsx","components/Filters/index.tsx","components/UserList.tsx","components/Routes.tsx","components/common/Home.tsx","components/common/NotFound.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["extendsItemInEntities","entities","newProps","map","item","id","toString","obj","convertIdNumberToString","setToEntities","o","inverseSelected","user","isSelected","changeUserStatusAndDateFormat","userStatus","dateOfDeletion","Date","toLocaleString","year","month","day","hour","minute","timezone","HOST","reducerState","loading","loaded","userRecord","defaultFilters","userName","pagination","page","pageSize","combineReducers","users","userState","action","type","response","LOAD_ALL_USERS","data","LOAD_USER","filters","state","payload","value","enhancer","applyMiddleware","thunk","store","next","callAPI","rest","setTimeout","fetch","then","res","json","catch","error","createStore","reducer","Loader","Main","styled","div","selectedUser","userNameSelector","createSelector","paginationSelector","usersGetter","entitiesSelector","userSelector","loadingSelector","loadedSelector","filtratedUsersSelector","filter","name","toLowerCase","includes","slice","sort","a","b","Wrap","Title","h2","props","primary","css","Link","List","User","disabled","Icon","button","Bio","unSelectedPrevUser","userId","findByEntities","getUser","find","this","loadUser","userLoad","clearUser","userLoadId","more","to","getBody","Object","keys","length","shortInfo","bio","src","pic","alt","Component","connect","ownProps","u","link","Input","handleChange","e","inputFiltratedByName","target","placeholder","onChange","PaginationFilter","handlePageChange","changePages","countFiltratedByName","total","activePage","itemsCountPerPage","totalItemsCount","Filters","UsersList","isSelectedUser","handleChangeUserStatus","changeUserStatus","handleSelectedUser","findPrevSelectedUser","setState","loadAllUsers","userDetails","key","onClick","as","NavLink","Routes","getIndex","match","params","findSelectedUser","UserList","path","render","exact","Home","NotFound","App","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.60d99c26.chunk.js","sourcesContent":["import {UserInterface, LoadUserInterface, UserRecord} from './reducer/users'\n\nexport function extendsItemInEntities(entities: UserInterface[], newProps: UserRecord) {\n    const extendedEntities = entities.map(item => {\n        item.id = item.id.toString();\n        return item;\n    });\n    return extendedEntities\n        .map((obj: UserInterface) => ({ ...obj, ...newProps }));\n}\n\nexport function convertIdNumberToString(obj: LoadUserInterface) {\n    if (obj)\n        obj.id = obj.id.toString();\n        return obj;\n}\n\nexport function setToEntities(entities : UserInterface[]) {\n    return entities.map(o => o);\n}\n\nexport function inverseSelected(user: UserInterface) {\n    user.isSelected = !user.isSelected;\n    return user;\n}\n\nexport function changeUserStatusAndDateFormat(user: UserInterface) {\n    const options = {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour:'numeric',\n        minute: 'numeric',\n        timezone: 'UTC'\n    };\n    if (user.userStatus === 'X') {\n        user.userStatus = 'R';\n        return user.dateOfDeletion = new Date().toLocaleString('ru', options);\n    }\n    user.userStatus = 'X';\n    return user.dateOfDeletion = '';\n}","export const LOAD_ALL_USERS = 'LOAD_ALL_USERS';\nexport const LOAD_USER = 'LOAD_USER';\n\nexport const INPUT_NAME = 'INPUT_NAME';\nexport const CHANGE_PAGES = 'CHANGE_PAGES';\n\nexport const CHANGE_USER_STATUS = 'CHANGE_USER_STATUS';\nexport const SELECTED_USER = 'SELECTED_USER';\n\nexport const START = '_START';\nexport const SUCCESS = '_SUCCESS';\nexport const FAIL = '_FAIL';\n\nexport const HOST = 'https://mrsoft.by/tz20';","import {\n    setToEntities,\n    extendsItemInEntities,\n    convertIdNumberToString\n} from '../helpers'\nimport {\n    START,\n    SUCCESS,\n    LOAD_ALL_USERS,\n    LOAD_USER,\n    CHANGE_USER_STATUS,\n    SELECTED_USER\n} from '../constants'\n\nexport type StateUsersInterface = {\n    loading: boolean\n    loaded: boolean\n    entities: UserInterface[]\n    user: {}\n}\n\nexport type LoadUserInterface = {\n    id: string\n    bio: string\n    pic: string\n}\nexport type UserInterface = {\n    id: string\n    name: string\n    shortInfo: string\n    more: string\n    userStatus: 'X' | 'R'\n    dateOfDeletion: string\n    isSelected: boolean\n}\n\nexport type ActionType = {\n    type: string\n    response: {\n        data: UserInterface[]\n    } & LoadUserInterface\n}\n\nconst reducerState: StateUsersInterface = {\n    loading: false,\n    loaded: false,\n    entities: [],\n    user: {},\n}\n\nexport interface UserRecord {\n    userStatus: 'X' | 'R'\n    isSelected: boolean\n}\n\nconst userRecord: UserRecord = {\n    userStatus: 'X',\n    isSelected: false,\n}\n\n\nexport default (userState = reducerState, action: ActionType) => {\n    const {type, response} = action;\n\n    switch (type) {\n        case LOAD_ALL_USERS + START:\n            return {...userState, loading: true};\n\n        case LOAD_ALL_USERS + SUCCESS:\n            return {\n                ...userState,\n                entities: extendsItemInEntities(\n                    response.data, userRecord\n                ),\n                loading: false,\n                loaded: true\n            };\n\n        case LOAD_USER + START:\n            return {...userState, loading: true};\n\n        case LOAD_USER + SUCCESS:\n            return {\n                ...userState,\n                user: convertIdNumberToString(response),\n                loading: false,\n                loaded: true\n            };\n\n        case CHANGE_USER_STATUS:\n            return {...userState,\n                entities: setToEntities(userState.entities)\n            };\n\n        case SELECTED_USER:\n            return {...userState,\n                entities: setToEntities(userState.entities)\n            };\n\n        default:\n            return userState\n    }\n}","import {\n    INPUT_NAME,\n    CHANGE_PAGES,\n} from '../constants'\n\nconst defaultFilters = {\n    userName: '',\n    pagination: {\n        page: 1,\n        pageSize: 5,\n    },\n};\nexport type StateFiltersInterface = typeof defaultFilters;\n\nexport type ActionType = {\n    type: string\n    payload: {\n        value: string\n        page: number\n    }\n}\n\nexport default (state = defaultFilters, action: ActionType) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case INPUT_NAME:\n            defaultFilters.userName = payload.value;\n            return {...state, ...defaultFilters}\n\n        case CHANGE_PAGES:\n            return {...state, pagination: payload};\n\n        default:\n            return state\n    }\n}","import {combineReducers} from 'redux'\nimport users from './users'\nimport filters from './filters'\n\nexport default combineReducers({\n    users,\n    filters\n})","import {createStore, applyMiddleware} from 'redux'\nimport reducer from '../reducer'\nimport {api} from '../middlewares/api'\nimport thunk from 'redux-thunk'\n\nconst enhancer = applyMiddleware(thunk, api);\n\nconst store = createStore(reducer, {}, enhancer);\n\nexport default store","import { Dispatch, Middleware, AnyAction } from 'redux'\nimport {START, SUCCESS, FAIL} from '../constants'\nimport {UserInterface} from '../reducer/users'\n\nexport interface Action {\n    type: string\n    callAPI?: string\n    payload?: UserInterface\n}\n\nexport const api: Middleware<Dispatch> = store => next =>\n    (action: Action | AnyAction) => {\n\n    const {callAPI, type, ...rest} = action;\n    if (!callAPI) return next(action);\n\n    next({\n        ...rest,\n        type: type + START\n    });\n    //maybe better to add headers to the Server (Access-Control-Allow-Origin: %HOST%) ?\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n\n    setTimeout(() => {\n        fetch(proxyUrl + callAPI)\n            .then(res => res.json())\n            .then(response => next({...rest, type: type + SUCCESS, response}))\n            .catch(error => next({...rest, type: type + FAIL, error}))\n    }, 500)\n}","import React from 'react'\nimport styled from 'styled-components'\n\nfunction Loader() {\n    return (\n        <Main>\n            <h2>Loading...</h2>\n        </Main>\n    )\n}\n\nexport default Loader;\n\nconst Main = styled.div`\n  display: flex;\n  width: 350px;\n`","import {\n    INPUT_NAME,\n    CHANGE_PAGES,\n    LOAD_ALL_USERS,\n    LOAD_USER,\n    CHANGE_USER_STATUS,\n    SELECTED_USER,\n    HOST\n} from '../constants'\nimport {UserInterface} from '../reducer/users'\nimport {ActionType} from '../reducer/filters'\n\n\nexport function inputFiltratedByName(value: string) {\n    return {\n        type: INPUT_NAME,\n        payload: { value }\n    }\n}\n\nexport function changePages(payload: ActionType) {\n    return {\n        type: CHANGE_PAGES,\n        payload\n    }\n}\n\nexport function selectedUser(user: UserInterface) {\n    return {\n        type: SELECTED_USER,\n        payload: user\n    }\n}\n\nexport function changeUserStatus(user: UserInterface) {\n    return {\n        type: CHANGE_USER_STATUS,\n        payload: user\n    }\n}\n\nexport function loadAllUsers() {\n    return {\n        type: LOAD_ALL_USERS,\n        callAPI: `${HOST}/list.json`\n    }\n}\n\nexport function loadUser(link: string) {\n    return {\n        type: LOAD_USER,\n        callAPI: `${HOST}${link}`\n    }\n}\n","import {createSelector} from 'reselect'\nimport {UserInterface, StateUsersInterface} from '../reducer/users'\nimport {StateFiltersInterface} from '../reducer/filters'\n\nexport interface RootState {\n    filters: StateFiltersInterface\n    users: StateUsersInterface\n}\n\nconst filtersGetter = (state: RootState) => state.filters;\nconst userNameGetter = (state: RootState) => state.filters.userName;\nconst paginationGetter = (state: RootState) => state.filters.pagination;\nexport const userNameSelector = createSelector(userNameGetter, userName => userName);\nexport const paginationSelector = createSelector(paginationGetter, pagination => pagination);\n\n\nconst usersGetter = (state: RootState) => state.users.entities;\nexport const entitiesSelector = createSelector(usersGetter, entities => entities);\nconst userGetter = (state: RootState) => state.users.user;\nexport const userSelector = createSelector(userGetter, user => user);\n\nconst loadingGetter = (state: RootState) => state.users.loading;\nexport const loadingSelector = createSelector(loadingGetter, loading => loading);\nconst loadedGetter = (state: RootState) => state.users.loaded;\nexport const loadedSelector = createSelector(loadedGetter, loaded => loaded);\n\n\nexport const filtratedUsersSelector = createSelector(\n    usersGetter, filtersGetter, (users, filters) => {\n        const {userName, pagination} = filters;\n\n        return users\n            .filter((user: UserInterface) => userName ?\n                user.name.toLowerCase().includes(userName.toLowerCase())\n                : user\n            )\n            .slice((pagination.page * pagination.pageSize) - pagination.pageSize,\n                pagination.page * pagination.pageSize)\n            .sort((a: UserInterface, b: UserInterface) => {\n                if (a.userStatus > b.userStatus) {\n                    return -1;\n                }\n                if (a.userStatus < b.userStatus) {\n                    return 1;\n                }\n                return 0;\n            })\n    });\n","import styled, {css} from 'styled-components';\n\ntype Link = {\n    primary: boolean\n}\nconst Wrap = styled.div`\n    margin-top: 80px;\n    margin-left: 50px\n`\nconst Title = styled.h2`\n    color: tomato;\n    ${(props: Link) => props.primary && css`\n        color: palevioletred;\n    `}\n`\n\n\ntype Types = {\n    isSelected: boolean\n    disabled: boolean\n}\nconst Link = styled.a``\nconst List = styled.div`\n    margin-right: 20px;\n    width: 350px;\n`\nconst User = styled.div`\n    background-color: ${(props: Types) => props.isSelected && 'aqua'};\n    padding: 0 0 5px;\n    margin-bottom: 2px;\n    &[disabled] {\n        opacity: .6;\n        cursor: not-allowed;\n    }\n    & a {\n        pointer-events: ${(props: Types) => props.disabled && 'none'};\n    }\n`\nconst Icon = styled.button`\n    float: right;\n    background: transparent;\n    border-radius: 2em;\n    color: #f00;\n    display: inline-block;\n    font-size: 12px;\n    height: 20px;\n    line-height: 1px;\n    margin: 0;\n    padding: 0;\n    text-align: center;\n    width: 20px;\n    :focus { outline: none; }\n`\nconst Main = styled.div`\n  display: flex;\n`\nconst Bio = styled.div`\n  padding: 0 0 15px;\n  width: 500px;\n`\n\nexport {\n    Wrap, Title,\n    Link, List, User, Icon,\n    Main, Bio\n};","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport Loader from './common/Loader'\nimport {loadUser, selectedUser} from '../AC'\nimport {UserInterface} from '../reducer/users'\nimport {\n    entitiesSelector,\n    userSelector,\n    loadingSelector,\n    loadedSelector,\n    RootState,\n    filtratedUsersSelector\n} from '../selectors'\nimport {inverseSelected} from '../helpers'\nimport {HOST} from '../constants'\nimport {Bio} from './css'\n\n\ntype Props = {\n    id?: string,\n    user?: UserInterface,\n    entities: UserInterface[],\n    findByEntities: UserInterface[],\n    clearUser: UserInterface,\n    loaded: boolean,\n    loading: boolean,\n    userLoad: any,\n    selectedUser: (user: UserInterface) => void,\n    loadUser: (s: string) => void,\n}\n\n\nclass User extends Component<Props> {\n    componentDidMount() {\n        const {loading, loadUser, userLoad, user, clearUser, selectedUser} = this.props;\n        if (!loading) {\n            const userLoadId = userLoad && userLoad.id;\n            if (clearUser && clearUser.id) { //clear selected user for History back\n                selectedUser(inverseSelected(clearUser));\n            }\n            if (user && !user.isSelected) { //History back\n                selectedUser(inverseSelected(user));\n                if (user.id !== userLoadId) {\n                    this.unSelectedPrevUser(userLoadId);\n                }\n            }\n            if (user && !user.dateOfDeletion) loadUser(user.more);\n        }\n\n    }\n\n    unSelectedPrevUser = (userId: string) => {\n        const {findByEntities, selectedUser} = this.props;\n        const getUser = findByEntities.find(item => item.id === userId);\n        if (getUser && getUser.isSelected) {\n            selectedUser(inverseSelected(getUser));\n        }\n    }\n\n    render() {\n        const {user, loading} = this.props;\n        if (loading) return <Loader/>\n        if (!user || (user && user.userStatus === 'R'))\n            return <Redirect to='/mrsoft_tz20ts'/>\n\n        return (\n            <div>\n                <h3>Selected user name: {user.name}</h3>\n                <div>\n                    {this.getBody()}\n                </div>\n            </div>\n        )\n    }\n\n    getBody() {\n        const {userLoad, user} = this.props;\n        if (!Object.keys(userLoad).length) return null;\n        if (!user) return null;\n\n        return (\n            <section>\n                <b>Short info:</b> {user.shortInfo}<br/>\n                <b>Bio:</b>\n                <Bio>{userLoad.bio}</Bio>\n                <img src={`${HOST}${userLoad.pic}`} alt=\"Preview\"/>\n            </section>\n        )\n    }\n}\n\nexport default connect((state: RootState, ownProps: any) => ({\n    user: state.users.entities.find(u => u.id === ownProps.id),\n    entities: filtratedUsersSelector(state),\n    findByEntities: entitiesSelector(state),\n    userLoad: userSelector(state),\n    loading: loadingSelector(state),\n    loaded: loadedSelector(state)\n}), {loadUser, selectedUser})(User)\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {inputFiltratedByName} from '../../AC'\nimport {RootState, userNameSelector} from '../../selectors'\n\ntype Props = {\n    userName: string\n    inputFiltratedByName: Function\n}\n\nclass Input extends Component<Props> {\n\n    handleChange = (e: any) =>\n        this.props.inputFiltratedByName(e.target.value);\n\n    render() {\n        const {userName} = this.props;\n        return (\n            <div>\n                <label>\n                    <input\n                        type='text'\n                        value={userName}\n                        placeholder={userName || `Live filter`}\n                        onChange={this.handleChange}/>\n                </label>\n            </div>\n        )\n    }\n\n}\n\nexport default connect((state: RootState) => ({\n    userName: userNameSelector(state),\n}), {inputFiltratedByName})(Input)","import React, {Component} from 'react'\nimport Pagination from 'react-js-pagination'\nimport {connect} from 'react-redux'\nimport {changePages} from '../../AC'\nimport {entitiesSelector, userNameSelector, paginationSelector, RootState} from '../../selectors'\nimport {UserInterface} from '../../reducer/users'\nimport {StateFiltersInterface} from '../../reducer/filters'\n\ntype Props = {\n    users: UserInterface[]\n    changePages: Function\n} & StateFiltersInterface\n\nclass PaginationFilter extends Component<Props> {\n\n    handlePageChange = (page: number) => {\n        const {changePages, pagination} = this.props;\n        changePages({\n            page: page,\n            pageSize: pagination.pageSize\n        })\n    }\n\n    render() {\n        const {users, userName, pagination} = this.props;\n        let countFiltratedByName = 0;\n\n        if (userName) {\n            countFiltratedByName = users.filter(item => {\n                return item.name.toLowerCase().includes(userName.toLowerCase())\n            }).length;\n        }\n\n        const total = !userName ? users.length : countFiltratedByName;\n\n        return (\n            <div>\n                <Pagination\n                    activePage={pagination.page}\n                    itemsCountPerPage={pagination.pageSize}\n                    totalItemsCount={total <= 0 ? 1 : total}\n                    onChange={this.handlePageChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect((state: RootState) => ({\n    users: entitiesSelector(state),\n    userName: userNameSelector(state),\n    pagination: paginationSelector(state),\n}), {changePages})(PaginationFilter)","import React, {Fragment} from 'react'\nimport InputFilter from './Input'\nimport PaginationFilter from './Pagination'\n\nfunction Filters() {\n    return (\n        <Fragment>\n            <InputFilter />\n            <PaginationFilter />\n            <hr />\n        </Fragment>\n    )\n}\n\nexport default Filters;\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {NavLink} from 'react-router-dom'\nimport Filters from './Filters/index'\nimport {UserInterface} from '../reducer/users'\nimport {filtratedUsersSelector, entitiesSelector, loadingSelector, loadedSelector, RootState} from '../selectors'\nimport {changeUserStatusAndDateFormat, inverseSelected} from '../helpers'\nimport {loadAllUsers, changeUserStatus, selectedUser} from '../AC'\nimport {Link, List, User, Icon} from './css'\n\n\ntype Props = {\n    entities: UserInterface[],\n    findByEntities: UserInterface[],\n    loaded: boolean,\n    loading: boolean,\n    loadAllUsers: Function,\n    changeUserStatus: (user: UserInterface) => void,\n    selectedUser: (user: UserInterface) => void\n}\n\nclass UsersList extends Component<Props> {\n    state = {\n        isSelectedUser: true\n    }\n\n    componentDidMount() {\n        const {loaded, loading, loadAllUsers} = this.props;\n        if (!loaded && !loading)\n            loadAllUsers()\n    }\n\n    handleChangeUserStatus = (user: UserInterface) => {\n        const {changeUserStatus, selectedUser} = this.props;\n        changeUserStatusAndDateFormat(user);\n        changeUserStatus(user);\n        if (user.userStatus === 'R' && user.isSelected)\n            selectedUser(user);\n    }\n\n    handleSelectedUser = (user: UserInterface) => {\n        const {selectedUser, findByEntities} = this.props;\n        const findPrevSelectedUser = findByEntities.find(item => item.id !== user.id && item.isSelected);\n\n        if (findPrevSelectedUser)\n            selectedUser(inverseSelected(findPrevSelectedUser));\n        if (!user.isSelected)\n            selectedUser(inverseSelected(user));\n        this.setState({isSelectedUser: false})\n    }\n\n\n    render() {\n        const {entities} = this.props;\n        const userDetails = entities.map((user) =>\n            <User key={user.id}\n                  disabled={user.userStatus === 'R'}\n                  isSelected={user.isSelected}\n            >\n                <Icon onClick={() => this.handleChangeUserStatus(user)}>\n                    {user.userStatus}\n                </Icon>\n                <Link as={NavLink} to={`/mrsoft_tz20ts/${user.id}`}\n                      onClick={() => this.handleSelectedUser(user)}\n                >\n                    <b>{user.userStatus === 'R' ? `Deleted: ` : `Name: `}</b>\n                    {user.name}<br/>\n                    <b>{user.userStatus === 'R' ? `deleted at ${user.dateOfDeletion}` : `Short Info: `}</b>\n                    {user.userStatus !== 'R' && user.shortInfo}\n                </Link>\n            </User>)\n\n        return (\n            <div>\n                <Filters/>\n                {this.state.isSelectedUser && <h4>Please select user</h4>}\n                <List>\n                    {userDetails}\n                </List>\n            </div>\n        )\n    }\n}\n\nexport default connect((state: RootState) => ({\n    entities: filtratedUsersSelector(state),\n    findByEntities: entitiesSelector(state),\n    loading: loadingSelector(state),\n    loaded: loadedSelector(state)\n}), {loadAllUsers, changeUserStatus, selectedUser})(UsersList)\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\"\nimport {Route} from 'react-router-dom'\nimport User from './User'\nimport UserList from './UserList'\nimport {UserInterface} from '../reducer/users'\nimport {RootState, entitiesSelector} from \"../selectors\"\nimport {Main} from './css'\n\ntype Props = {\n    entities: UserInterface[]\n}\n\nclass Routes extends Component<Props> {\n    getIndex = ({match}: any) => {\n        const {id} = match.params;\n        return <User id={id} key={id}/>\n    };\n\n    findSelectedUser = () => {\n        const {entities} = this.props;\n        const getUser = entities.find(item => item.isSelected);\n        return <User clearUser={getUser} />\n    };\n\n    render() {\n        return (\n            <Main>\n                <UserList/>\n                <Route path=\"/mrsoft_tz20ts\" render={this.findSelectedUser} exact/>\n                <Route path=\"/mrsoft_tz20ts/:id\" render={this.getIndex}/>\n            </Main>\n        )\n    }\n}\n\nexport default connect((state: RootState) => ({\n    entities: entitiesSelector(state),\n}))(Routes)\n","import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nfunction Home() {\n    return (\n        <NavLink to=\"/mrsoft_tz20ts\">Please click for this link</NavLink>\n    )\n}\n\nexport default Home;","import React from 'react'\n\nfunction NotFound() {\n    return (\n        <h1>Not Found</h1>\n    );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport store from '../store'\nimport {Provider} from 'react-redux'\nimport Routes from './Routes'\nimport Home from './common/Home'\nimport NotFound from './common/NotFound'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport {Wrap, Title} from './css'\n\n\nfunction App() {\n    return (\n        <Wrap>\n            <Router>\n                <Provider store={store}>\n                    <div>\n                        <Title primary>List of cats</Title>\n                        <Switch>\n                            <Route path=\"/\" component={Home} exact />\n                            <Route path=\"/mrsoft_tz20ts\" component={Routes} />\n                            <Route path=\"*\" component={NotFound} />\n                        </Switch>\n                    </div>\n                </Provider>\n            </Router>\n        </Wrap>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}